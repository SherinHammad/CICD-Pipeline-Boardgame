pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven'
    }

    environment {
        SCANNER_HOME = tool 'sonnar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'mygitcredentials', url: 'https://github.com/SherinHammad/CICD-Pipeline-Boardgame.git'
            }
        }

        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
        }

        stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=BoardGame \
                            -Dsonar.projectKey=BoardGame \
                            -Dsonar.java.binaries=. \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }
stage('Quality Gate') {
    steps {
        script {
            timeout(time: 2, unit: 'MINUTES') {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
            }
        }
    }
}
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
                stage('Build & Tag Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'mydockertoken', toolName: 'docker') {
                            sh "docker build -t sherinhammad/boardgame:latest ."
                    }
               }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html sherinhammad/boardgame:latest "
            }
        }
        
        stage('Push Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialsId: 'mydockertoken', toolName: 'docker') {
                            sh "docker push sherinhammad/boardgame:latest"
                    }
               }
            }
        }
 stage('Deploy To Kubernetes') {
    steps {
        withKubeConfig(credentialsId: 'k3s-kubeconfig') {
            sh 'kubectl apply -f deployment-service.yaml'
        }
    }
}

stage('Verify the Deployment') {
    steps {
        withKubeConfig(credentialsId: 'k3s-kubeconfig') {
            sh 'kubectl get pods'
            sh 'kubectl get svc'
        }
    }
}
    }
}
